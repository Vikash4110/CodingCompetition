import React, { useEffect, useState } from "react";
import ReactStars from "react-stars";
import toast, { Toaster } from "react-hot-toast";

const backendUrl = import.meta.env.VITE_BACKEND_URL;

const questionsList = [
  "Knowledge base of the teacher (as perceived by you)",
  "Communication skills (in terms of articulation and comprehensibility)",
  "Sincerity / Commitment of the teacher (in terms of preparedness and interest in taking classes)",
  "Interest generated by the teacher in the class",
  "Ability to integrate course material with environment / other issues, to provide a broader perspective",
  "Accessibility and availability of the teacher in the department for academic consultations",
  "Initiative taken in formulating topics/ tests/assignments/examinations / seminars and projects",
  "Regularity in taking classes",
  "Completion of the course in a thorough and satisfactory manner",
  "Fairness in evaluating student performance and awarding grades.",
];

const Teacher = () => {
  const [teachers, setTeachers] = useState([]);
  const [selectedTeacher, setSelectedTeacher] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [comment, setComment] = useState("");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchTeachers = async () => {
      try {
        const response = await fetch(`${backendUrl}/api/data/teacher/all`);
        const data = await response.json();
        setTeachers(data);
      } catch (error) {
        console.error("Error fetching teachers:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchTeachers();
  }, []);

  useEffect(() => {
    if (selectedTeacher) {
      const initialQuestions = questionsList.map((q) => ({
        question: q,
        rating: 1, // Default rating
      }));
      setQuestions(initialQuestions);
    }
  }, [selectedTeacher]);

  const handleRatingChange = (index, newRating) => {
    setQuestions((prev) => {
      const updated = [...prev];
      updated[index].rating = newRating;
      return updated;
    });
  };

  const handleSubmit = async () => {
    try {
      const response = await fetch(`${backendUrl}/api/data/feedback/submit`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ teacherId: selectedTeacher, questions, comment }),
      });
      const data = await response.json();
      toast.success("Feedback submitted successfully!");
      setSelectedTeacher(null);
    } catch (error) {
      console.error("Error submitting feedback:", error);
      toast.error("Error submitting feedback.");
    }
  };

  return (
    <div className="p-6 bg-gradient-to-r from-indigo-200 via-purple-300 to-pink-300 min-h-screen">
      <Toaster />
      {loading ? (
        <p className="text-center text-2xl text-purple-700 font-semibold">Loading...</p>
      ) : (
        <>
          {!selectedTeacher ? (
            <>
              <h1 className="text-4xl font-extrabold text-center text-white mb-10">
                Select the Teacher for Feedback
              </h1>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {teachers.map((teacher) => (
                  <div
                    key={teacher._id}
                    className="bg-white p-6 shadow-lg rounded-xl transition-transform transform hover:scale-105 border border-gray-200 hover:shadow-2xl"
                  >
                    <h2 className="text-2xl font-bold text-gray-800 mb-3">{teacher.teacher_name}</h2>
                    <p className="text-lg text-gray-600 mb-1">
                      <strong>Department:</strong> {teacher.department}
                    </p>
                    <p className="text-lg text-gray-600 mb-1">
                      <strong>Subject Name:</strong> {teacher.subject_name}
                    </p>
                    <p className="text-lg text-gray-600 mb-1">
                      <strong>Subject Code:</strong> {teacher.subject_code}
                    </p>
                    <button
                      onClick={() => setSelectedTeacher(teacher._id)}
                      className="mt-4 px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition-colors"
                    >
                      Give Feedback
                    </button>
                  </div>
                ))}
              </div>
            </>
          ) : (
            <>
              <h1 className="text-4xl font-extrabold text-center text-white mb-10">
                Feedback for {teachers.find((t) => t._id === selectedTeacher)?.teacher_name}
              </h1>
              <div className="grid grid-cols-1 gap-8">
                {questions.map((q, index) => (
                  <div key={index} className="bg-white p-6 shadow-md rounded-xl">
                    <p className="text-lg font-semibold mb-2">{q.question}</p>
                    <ReactStars
                      count={5}
                      size={24}
                      value={q.rating}
                      onChange={(newRating) => handleRatingChange(index, newRating)}
                      half={false}
                      color2={"#ffd700"} // Gold color for stars
                    />
                  </div>
                ))}
              </div>
              <textarea
                placeholder="Any comments?"
                value={comment}
                onChange={(e) => setComment(e.target.value)}
                className="block w-full mt-4 border border-gray-300 p-4 rounded-lg"
              />
              <button
                onClick={handleSubmit}
                className="mt-6 px-8 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
              >
                Submit Feedback
              </button>
            </>
          )}
        </>
      )}
    </div>
  );
};

export default Teacher;
